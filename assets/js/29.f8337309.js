(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{373:function(r,a,t){"use strict";t.r(a);var n=t(42),e=Object(n.a)({},(function(){var r=this,a=r.$createElement,t=r._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"好好学习-天天向上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#好好学习-天天向上"}},[r._v("#")]),r._v(" 好好学习 天天向上")]),r._v(" "),t("h2",{attrs:{id:"数组扁平化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组扁平化"}},[r._v("#")]),r._v(" 数组扁平化")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("const arr = [1, 1, 2, 3, [3 , 4, 5, 6, [7, 8, [666, 8888]]]]\n方法一 普通循环：\nfunction flotArray (array) {\n    let result = [] \n    for (let i = 0; i < array.length; i++) {\n        result = Array.isArray(array[i]) ? result.concat(flotArray(array[i])) : result.concat(array[i])\n    }\n    return result\n}\n方法二 reduce 方法：\n function flotArray (array) {\n    return array.reduce((cur, next) => cur.concat(Array.isArray(next) ? flotArray(next) : next), [])\n}\n方法三 while语句循环调用：\nfunction flotArray (array) {\n    while (array.some(item => Array.isArray(item))) {\n        array = [].concat(...array)\n    }\n    return array\n}\nconsole.log(flotArray(arr), 'floatrray')\n")])])]),t("h2",{attrs:{id:"简单版深复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单版深复制"}},[r._v("#")]),r._v(" 简单版深复制")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("const objs = {\n    a: 2,\n    b: 4,\n    arr: [1, 3, 5, [{oj: {a: 'c'}}]],\n    fun: function() {},\n    ob2: {\n        a: 'fff',\n        arr2: [2]\n    }\n}\nfunction deepClone (obj) {\n    const isObject = Object.prototype.toString.call(obj) === '[object Object]'\n    let result\n    if (isObject) {\n        const isArray = Array.isArray(obj)\n        result = isArray ? [] : {}\n        for (let key in obj) {\n            result[key] = isArray ? deepClone(obj[key]) : obj[key]\n        }\n    } else {\n        result = obj\n    }\n    return result\n}\n// console.log(deepClone(objs), 'objs');\n")])])]),t("h2",{attrs:{id:"防抖节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防抖节流"}},[r._v("#")]),r._v(" 防抖节流")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("// 节流 实现思路：在设定的执行器内重复调用方法，不予执行直接返回，直至特定时间内执行器执行完毕，再接着执行下一个执行器。\nfunction throttle (cb, delay) {\n    let timer \n    return function (...arg) {\n        if (timer) clearTimeout(timer)\n        const _that = this\n        timer = setTimeout(() => {\n            cb.apply(_that, arg)\n        }, delay)\n    }\n}\n\n// 防抖 时间思路：首先设定一个执行器，重复触发执回调则清空上次设定的执行器不予执行，直至执行最后一次触发。\nfunction debounce (cb, delay) {\n    let timer \n    return function (...arg) {\n        if (timer) return   \n        const _that = this\n        timer = setTimeout(() => {\n            cb.apply(_that, arg)\n            timer = null\n        }, delay)\n    }\n}\n")])])]),t("h2",{attrs:{id:"数组乱序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组乱序"}},[r._v("#")]),r._v(" 数组乱序")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function arrarSort (arr) {\n    return arr.sort((a, b) => Math.random() - .5)\n}\n")])])]),t("h2",{attrs:{id:"阶乘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阶乘"}},[r._v("#")]),r._v(" 阶乘")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function factorial(n) {\n    if (n == 1) return n;\n    return n * factorial(n - 1)\n}\nconsole.log(factorial(5)) // 5 * 4 * 3 * 2 * 1 = 120\n")])])]),t("h2",{attrs:{id:"二分查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[r._v("#")]),r._v(" 二分查找")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function bin2(arr, value) {\n    let a = 0,\n        b = arr.length-1;\n    while (a <= b) {\n        let mid = parseInt((a + b) / 2)\n        console.log(mid);\n        if (arr[mid] === value) {\n            return mid\n        } else if (arr[mid] < value) {\n            a = mid + 1\n        }  else if (arr[mid] > value) {\n            b = mid - 1\n        } else {\n            return -1\n        }\n    }\n}\nconst bin2Arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nconsole.log(bin2(bin2Arr, 20), '20 index');\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);