(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{382:function(t,e,n){"use strict";n.r(e);var a=n(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"react"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),n("hr"),t._v(" "),n("blockquote",[n("p",[t._v("用于构建用户界面的javascript库")])]),t._v(" "),n("h2",{attrs:{id:"用户界面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户界面"}},[t._v("#")]),t._v(" 用户界面")]),t._v(" "),n("blockquote",[n("p",[t._v("++User Interface UI 的简称++")])]),t._v(" "),n("h2",{attrs:{id:"声明式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明式"}},[t._v("#")]),t._v(" 声明式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React 可以非常轻松地创建用户交互界面，为你应用的每一个状态设计简洁的视图，在数据改变时 React也可以高效的更改渲染界面，\n用声明式编写UI,他人那你的代码更加可靠，且方便调试\n")])])]),n("h2",{attrs:{id:"组件化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),n("p",[n("code",[t._v("react 组件封装了html代码，取代了 javascript template 模板，通过扩展HTML元素 整合你的代码")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("创建好拥有各自的状态组件，再由组件构成更加复杂的用户界面；\n无需再用模板代码，通过使用javascript 编写的组件可以更好的传递数据，将应用状态和DOM拆分开来；\n")])])]),n("h2",{attrs:{id:"jsx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[t._v("#")]),t._v(" jsx")]),t._v(" "),n("p",[n("code",[t._v("jsx是 javascript and xml 的简写")])]),t._v(" "),n("h4",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),n("p",[n("code",[t._v("jsx 类似于xml的javascript的语法扩展")])]),t._v(" "),n("p",[n("code",[t._v("xml 指可扩展标记语言 被设计用来传输和存储数据")])]),t._v(" "),n("p",[n("code",[t._v("json 写发必xml简单，类似与js对象，以键值对的形式保存")])]),t._v(" "),n("h2",{attrs:{id:"意义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#意义"}},[t._v("#")]),t._v(" 意义")]),t._v(" "),n("p",[t._v("++我们之前创建一个template 模板 想在js中写html 需要通过字符串拼接 ，插入变量的时候需要截断，非常麻烦，而且很容易处错，随后jsx 问世 相比之下 较为方便好用++")]),t._v(" "),n("hr"),t._v(" "),n("h4",{attrs:{id:"虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom"}},[t._v("#")]),t._v(" 虚拟Dom")]),t._v(" "),n("h2",{attrs:{id:"传统操作dom绑定数据的方式及调优"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统操作dom绑定数据的方式及调优"}},[t._v("#")]),t._v(" 传统操作dom绑定数据的方式及调优")]),t._v(" "),n("ol",[n("li",[t._v("document.createElement()")]),t._v(" "),n("li",[t._v("innerHTML")])]),t._v(" "),n("p",[n("code",[t._v("虚拟dom通过创建虚拟dom与原dom树的比较，插入更新模板 算法 diff算法")])]),t._v(" "),n("h4",{attrs:{id:"调优思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调优思路"}},[t._v("#")]),t._v(" "),n("code",[t._v("调优思路")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("通过createElement()创建 appendChild插入  和innerHTML \n的dom频繁的插入节点，导致页面进行大量重绘，性能很差，\n我们可以通过document.createCreateFragement() 片段来完成dom 操作一次性插入到节点\n")])])]),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("react 综合渲染性能比较强 \n它结合了jsx 以及 diff 算法， 通过虚拟dom与原dom树的比较，替换当前发生变化的数据完成模板的局部更新；\n\n*** 一般情况下 原生实现的渲染性能好，从整体实用性来看,react的diff算法在前段框架中运用比较友好；\n")])])]),n("hr"),t._v(" "),n("h3",{attrs:{id:"新版-context-使用方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新版-context-使用方式"}},[t._v("#")]),t._v(" 新版 context 使用方式")]),t._v(" "),n("blockquote",[n("p",[t._v("context.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\n\nexport default React.createContext() // 也可以不用添加默认值\n\nexport default React.createContext({ // 此处可以添加默认值\n    defaultState: '默认值'\n})\n\n")])])]),n("blockquote",[n("p",[t._v("parent.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<context.Provider value = {\n    {\n        changeContext: this.changeContext\n    }\n}>\n    <SonCom msg = { msg }/>\n</context.Provider>\n")])])]),n("blockquote",[n("p",[t._v("sonComponent.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React, { Component } from 'react';\nimport context from '../../../../utils/context'\n\nclass GarndSonCom extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newMsg: '我希望你，是我独家的记忆！'\n        }\n    }\n    \n    render() {\n        let { newMsg } = this.state;\n        return (\n            <div>\n                this is GarndSonCom\n                <context.Consumer>\n                    {\n                        (content) => {\n                            return <button onClick = {()=> {\n                                content.changeContext(newMsg)\n                            }}>change content</button>\n                        }\n                    }\n                </context.Consumer>\n            </div>\n        );\n    }\n}\n\nexport default GarndSonCom;\n\n")])])]),n("h4",{attrs:{id:"connect-模拟"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect-模拟"}},[t._v("#")]),t._v(" connect 模拟")]),t._v(" "),n("blockquote",[n("p",[t._v("connect.js")])]),t._v(" "),n("blockquote",[n("p",[t._v("函数接收一个组件 返回一个操作后的 组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\nimport context from './context'\n\nfunction connect(callback, dispatch){\n    return (Components) => {\n        return class extends React.Component {\n            render() {\n                return (\n                    <context.Consumer>\n                        {\n                            (store) => {\n                                let res = callback(store)\n                                let mapDispatch = (ops) => {\n                                    // 可以接受到组件发送的参数执行 然后反会执行结果 在映射到相应组件中即可this.props 访问\n                                    return ops;\n                                }\n                                let ops = dispatch && dispatch(mapDispatch)\n                                console.log(ops,'00')\n                                return <Components { ...res } { ...ops } />\n                            }\n                        }\n                    </context.Consumer>\n                )\n            }\n        }\n    }\n}\n\nexport default connect;\n")])])]),n("blockquote",[n("p",[t._v("html 版本")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" function Connect(callback, ops){ // 接收一个组件 返回一个新的组件\n            let obj = {\n                'info': {\n                    name: '张富贵',\n                    age: '24',\n                    height: '170'\n                }\n            }\n            let res = callback(obj) // 需要返回的值\n            let dispatch = (res) => {\n                console.log(res)\n            }\n            let result = ops(dispatch)\n            return (Index) => {\n               return class extends React.Component {\n                    render() {\n                        return (\n                            <div>\n                                <Index { ...res } { ...result }/>\n                            </div>\n                        )\n                    }\n                }\n            }\n        }\n        \n        const mapStateToProps = (obj) => {\n            return obj['info'] // 此处就相当于 mapStateToProps redux 将参数映射到组件中\n        }\n        \n        const mapDispatchToProps = (dispatch) => {\n            return {\n                changeName: () => {\n                    return dispatch({\n                        type: 'CHANGE_NAME',\n                        payload: 'this is update user name'\n                    })\n                }\n            }\n        }\n\n        let MegDom =  Connect(mapStateToProps, mapDispatchToProps)(Index) // 传入组件;\n")])])]),n("h3",{attrs:{id:"react-生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期"}},[t._v("#")]),t._v(" react 生命周期")]),t._v(" "),n("h5",{attrs:{id:"实例化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例化"}},[t._v("#")]),t._v(" 实例化")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- getDefaultProps  获取默认props 属性 此时组件实例化对象还没有被创建出来\n- getInitialState  初始化 设置默认状态 经过第二阶段，组件的状态就被创建出来了。因此在这个阶段才有机会为初始化状态赋值。 \nES6不在需要getInitialState方法，而是直接在constructor中直接用this.state即可，更加方便。 \n- componentWillMount 实例前 渲染前 \n- render 渲染\n- componentDidMount 第一次渲染完成dom 组建一家构建完毕\n")])])]),n("h5",{attrs:{id:"存在期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存在期"}},[t._v("#")]),t._v(" 存在期")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- componentWillReceiveProps 当接收到props改变时触发的 第一个参数表示新的属性 生命周期函数 \n- shouldComponentUpdate  返回boolean值 true更新 false不更新 判断是否更改状态 更新 参数一表示新的属性 newProps 第二个参数表示状态 newState  \n- componentWillUpdate   更新前期  \n- render    渲染\n- componentDidUpdate  更新完成后 更新完毕\n")])])]),n("h5",{attrs:{id:"销毁期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#销毁期"}},[t._v("#")]),t._v(" 销毁期")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- componentWillUnmount  卸载 销毁\n")])])]),n("blockquote",[n("p",[t._v("v17 版本后 将删除的 钩子函数")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    componentWillMount\n    componentWillReceiveProps\n    componentWillUpdate\n")])])]),n("blockquote",[n("p",[t._v("v17 版本后 将添加的 钩子函数")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    static getDreivedStateFromProps(nextProps, prevState){}\n    getSnapshotBeforeUpdate(prevProps, prevState){}\n")])])]),n("h5",{attrs:{id:"新增函数具体使用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新增函数具体使用方法"}},[t._v("#")]),t._v(" 新增函数具体使用方法")]),t._v(" "),n("h2",{attrs:{id:"static-getsnapshotbeforeupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#static-getsnapshotbeforeupdate"}},[t._v("#")]),t._v(" static getSnapshotBeforeUpdate")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    参数\n        nextProps\n        prevState\n    \n    static getDreivedStateFromProps(nextProps, prevState){\n        if ( nextProps.val !== prevState.val ) { // 如若不全等\n            return {\n                nextProps.val //返回最新值 \n            }\n        }\n        return null;\n    }\n    \n    返回值  如果返回一个Object，则相当于进行一次setState操作（注意，这里返回对象虽然改变了state，但不会再次触发此函数）\n    如果为null，则不更新state\n    如果无返回值（即默认return undefined），报错\n    如果返回一个基本类型值（如return 666;），则与返回null无区别\n    这里需要注意的是：\n    \n    getDerivedStateFromProps是一个静态方法，this为undefined，不指向实例，所以也拿不到实例的属性和方法。\n    至于为什么要将此方法设计为静态方法，官方文档解释：以后的组件将进行异步渲染，\n    防止实例属性的被不安全访问，编写出异步兼容的代码\n    此方法不提供一个prevProps的参数，官方解释为，首次执行此方法，prevProps是null，\n    那么每次调用此方法都要判断一次，很耗性能。其次，如果大家以后都习惯没有prevProps的日子，\n    那么react就不保存prevProps的引用了，节省内存，提高性能（心里一万匹***奔腾而过）\n    如果要访问prevProps，只能将一些props的属性记录到state里面去了\n    不能同上述提到即将要被删除掉的三个生命周期钩子同时使用\n    \n")])])]),n("h2",{attrs:{id:"getsnapshotbeforeupdate-prevprops-prevstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getsnapshotbeforeupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" getSnapshotBeforeUpdate(prevProps, prevState) {}")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    参数：prevProps, prevState（prevState为上一次更新中getDerivedStateFromProps方法执行后state的值）\n    \n    \n    触发时间：update发生的时候，在render之后，在组件dom渲染之前\n    \n    返回值可以为任意值，且返回值将作为componentDidUpdate的第三个参数\n    这里需要注意的是：\n    与componentDidUpdate成对使用，否则会报错\n    不能同上述提到即将要被删除掉的三个生命周期钩子同时使用\n\n    getSnapshotBeforeUpdate(prevProps, prevState) { // 此方法的返回值为componentDidUpdate 函数的第三个参数\n        return '独家记忆' // 任意值  \n    }\n    \n    // 注 此生命周期钩子函数必须使用componentDidUpdate 结合使用 否则会报警告\n    componentDidUpdate(prevProps, prevState, val) {\n        val // 独家记忆\n    }\n\n")])])]),n("hr"),t._v(" "),n("h3",{attrs:{id:"react组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react组件"}},[t._v("#")]),t._v(" React组件")]),t._v(" "),n("hr"),t._v(" "),n("blockquote",[n("p",[t._v("组件可以将ui切分成一些独立的，可复用性的部件，这样你就可以只专注于构建每一个单独的部件")])]),t._v(" "),n("blockquote",[n("p",[n("em",[t._v("组件从概念上看就像是函数，它可以接受任意的输入值（props），并返回一个需要在页面展示的React元素")])])]),t._v(" "),n("h3",{attrs:{id:"类定义组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类定义组件"}},[t._v("#")]),t._v(" 类定义组件")]),t._v(" "),n("ul",[n("li",[t._v("import React from 'react'")]),t._v(" "),n("li",[t._v("import ReactDom from 'react-dom'")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    import React from 'react'\n    class Sunshine extents React.Component {\n        render(){\n            <div>Wraper-container</div>\n        }\n    }\n    \n    //官方解构写发\n    import Reacf,{Component} from 'react';\n    class Shushine extends Component {\n        render(){\n            <div>Wraper-container</div>\n        }\n    }\n")])])]),n("h3",{attrs:{id:"函数定义组件-无状态组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数定义组件-无状态组件"}},[t._v("#")]),t._v(" 函数定义组件 (无状态组件)")]),t._v(" "),n("blockquote",[n("p",[t._v("函数式组件又被称为无状态组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    const Sunshine = (props)=>{\n         // 如果容器节点子节有多个，官方建议在容器外包裹（）小括号\n        return (\n            <div>\n                my name is zhangfugui\n                <h1>我是标题1</h1>\n            </div>\n        )\n    }\n")])])]),n("h3",{attrs:{id:"注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),n("ul",[n("li",[t._v("无状态组件props不要使用this.props调用父组件传入的参数。只能使用props接受父组件传送的参数")]),t._v(" "),n("li",[t._v("无状态组件没有生命周期")]),t._v(" "),n("li",[t._v("无状态组件没有this指向")]),t._v(" "),n("li",[t._v("无状态组件 组件名不能被 new 实例化")]),t._v(" "),n("li",[t._v("组件只能返回一个根容器节点")]),t._v(" "),n("li",[t._v("类组件如果显示声明了 constructor 必须调用 super()")])]),t._v(" "),n("h3",{attrs:{id:"组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件传值"}},[t._v("#")]),t._v(" 组件传值")]),t._v(" "),n("blockquote",[n("p",[t._v("传值方式")])]),t._v(" "),n("h2",{attrs:{id:"父子传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子传值"}},[t._v("#")]),t._v(" 父子传值")]),t._v(" "),n("blockquote",[n("p",[t._v("通过props传值给子组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    import React from 'react';\n    \n    class ParentCom extends React.Component{\n        render(){\n            return (\n                <ChildrenCom content=[1,2,3,4]/>\n            )\n        }\n    }\n    \n    class ChildrenCom extends React.Component{\n        render(){\n        const {content} =this.props;\n            return <div>{content}</div>\n        }\n    }\n\n")])])]),n("h2",{attrs:{id:"子父传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子父传值"}},[t._v("#")]),t._v(" 子父传值")]),t._v(" "),n("blockquote",[n("p",[t._v("通过父组件传入回调函数 子组件接受 通过arguments传值 父组件接受arg 达到 回调函数 传参 子向父 的方式")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    import React from 'react';\n    \n    class ParentCom extends React.Component{\n        getChildCon(res){\n            console.log(res)\n        }\n        render(){\n            return (\n                <ChildrenCom getChildCon=this.getChildCon />\n            )\n        }\n    }\n    \n    class ChildrenCom extends React.Component{\n        componentDidMount(){\n            const {getChildCon} =this.props;\n            getChildCon(){\n                return 'hello girl'\n            }\n        }\n        render(){\n            return <div></div>\n        }\n    }\n\n")])])]),n("h2",{attrs:{id:"跨级传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨级传值"}},[t._v("#")]),t._v(" 跨级传值")]),t._v(" "),n("blockquote",[n("p",[t._v("方式一: 通过层层传递 祖先组件>父组件>孙子组件； 的方式传值\n方式二：context 方式")])]),t._v(" "),n("blockquote",[n("p",[t._v("祖先组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    import React from 'react'\n    import PropTypes from 'prop-types'\n    \n    class ParentComponent extends React.Component {\n       // 声明Context对象属性\n       static childContextTypes = {\n         propA: PropTypes.string,\n         methodA: PropTypes.func\n    }\n      \n     // 返回Context对象，方法名是约定好的\n     getChildContext () {\n        return {\n          propA: 'propA',\n          methodA: () => 'methodA'\n        }\n     }\n      \n     render () {\n        return <MiddleComponent />\n      }\n    }\n    \n")])])]),n("blockquote",[n("p",[t._v("子组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    class MiddleComponent extends React.Component {\n      render () {\n        return <ChildComponent />\n      }\n    }\n    \n")])])]),n("blockquote",[n("p",[t._v("孙子组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    class ChildComponent extends React.Component {\n      // 声明需要使用的Context属性\n      static contextTypes = {\n        propA: PropTypes.string,\n        methodA:PropTypes.func\n      }\n      \n      componentDidMount(){\n          const {\n          propA\n        } = this.context\n        propA(){\n            // \n        }\n      }\n      \n      render () {\n      \n        const {\n          propA\n        } = this.context\n        \n        return (\n            this is {propA}\n        )\n      }\n    }\n\n    \n")])])]),n("h2",{attrs:{id:"同级传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同级传值"}},[t._v("#")]),t._v(" 同级传值")]),t._v(" "),n("blockquote",[n("p",[t._v("events 插件实现同级传参的目的")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    cnpm install events --save\n\n    import EventBus from 'events';\n    \n    // 发送事件  发布\n    sunshine.emit('message','我希望你，是我独家的记忆！')\n    \n    // 接收事件  订阅\n    sunshine.on('message',(res)=>{\n        console.log(res)\n    })\n    \n")])])]),n("h2",{attrs:{id:"redux-通过connect-将组件与仓库链接-详情》后续"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux-通过connect-将组件与仓库链接-详情》后续"}},[t._v("#")]),t._v(" redux 通过connect 将组件与仓库链接 详情》后续")]),t._v(" "),n("blockquote",[n("p",[t._v("redux 好处 便于状态的管理与运用")])]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"redux添加监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux添加监听"}},[t._v("#")]),t._v(" redux添加监听")]),t._v(" "),n("blockquote",[n("p",[t._v("当仓库状态改变是，页面数据也需要随着改变，通过subscribe 监听函数数据变化，并绑定到视图 view")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    import store from 'store'\n    import React from 'react'\n    import ReactDom from 'react-dom'\n    \n    const template = <div></div>\n    const element = document.getElementById('#Sunshine');\n    \n    const render = ()=> {\n        Reacr.render(template,element)\n    }\n    \n    render()\n    \n    // subscribe 监听函数只能监听一个函数，所以对rnder方法的封装改造\n    store.subscribe(render)\n    \n")])])]),n("h5",{attrs:{id:"组件component与仓库redux-将仓库-与组件-connect-连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件component与仓库redux-将仓库-与组件-connect-连接"}},[t._v("#")]),t._v(" 组件component与仓库redux 将仓库 与组件 connect 连接！")]),t._v(" "),n("blockquote",[n("p",[t._v("普通连接")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    \n    import {connect} from 'react-redux';\n    import React from 'reacr';\n    \n    class Sunshine extends React.Component {\n        render(){\n            return <div> my name is sunshine </div>\n        }\n    }\n    \n    const mapStateToProps = (state)=> {\n        return state;\n    }\n    \n    const mapDispatchToProps = (dispatch) =>{\n        return {\n            update(){\n                dispatch(type:\"UPDATE\",payload:ops)\n            }\n        }\n    }\n    \n    export default connect(mapStateToProps,mapDispatchToProps)(Sunshine)\n\n")])])]),n("h5",{attrs:{id:"react-redux-扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-redux-扩展"}},[t._v("#")]),t._v(" react-redux 扩展")]),t._v(" "),n("blockquote",[n("p",[t._v("bindActioncreators")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { bindActionCreators } from 'redux';\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators(listActions, dispatch)\n    // return {\n    //     changeName() {\n    //         dispatch(listActions.changeName())\n    //     }\n    // }\n}\n")])])]),n("h5",{attrs:{id:"thunk-applymiddleware"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thunk-applymiddleware"}},[t._v("#")]),t._v(" thunk applyMiddleware")]),t._v(" "),n("blockquote",[n("p",[t._v("store.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nlet store = createStore(storeReducers,applyMiddleware(thunk))\n")])])]),n("blockquote",[n("p",[t._v("actions.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nexport const changeName = (name) => {\n    return (dispatch, getstate) =>{ // 返回一个函数\n        dispatch({\n            type: 'NAME'\n        })\n    }\n}\n")])])]),n("blockquote",[n("p",[t._v("装载器 连接")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n    import {connect} from 'react-redux';\n    import React from 'reacr';\n    \n    const mapStateToProps = (state)=> {\n        return state;\n    }\n    \n    const mapDispatchToProps = (dispatch) =>{\n        return {\n            update(){\n                dispatch(type:\"UPDATE\",payload:ops)\n            }\n        }\n    }\n    \n    @connect(mapStateToProps,mapDispatchToProps)\n    \n    class Sunshine extends React.Component {\n        render(){\n            return <div> my name is sunshine </div>\n        }\n    }\n    \n    export default Sunshine\n\n")])])]),n("h4",{attrs:{id:"装饰器-装载器-需要下载插件-并且配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰器-装载器-需要下载插件-并且配置"}},[t._v("#")]),t._v(" 装饰器(装载器) 需要下载插件 并且配置")]),t._v(" "),n("blockquote",[n("p",[t._v("装饰器")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("//decorator （装饰器）是Es7 里面的一个语法糖，作用于类，类属性方法，为他们提供一个实现与业务逻辑无关的功能接口；\n")])])]),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    //babel 6.0\n    npm install babel-plugin-trasform-decorator --save\n    //babel 7.0\n    npm install @babel/plugin-proposal-decorators --save\n")])])]),n("h2",{attrs:{id:"配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),n("p",[t._v("// .babelrc")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    {\n        "plugin":["@babel/plugin-proposal-decorators"]\n    }\n')])])]),n("hr"),t._v(" "),n("h3",{attrs:{id:"路由-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由-router"}},[t._v("#")]),t._v(" 路由 Router")]),t._v(" "),n("h5",{attrs:{id:"安装-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),n("blockquote",[n("p",[t._v("cnpm install react-router-dom --save")])]),t._v(" "),n("h5",{attrs:{id:"分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),n("ul",[n("li",[t._v("历史模式 BrowserRouter")]),t._v(" "),n("li",[t._v("哈希模式 HashRouter")])]),t._v(" "),n("h5",{attrs:{id:"withrouter-当前组件内部可以访问路由参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#withrouter-当前组件内部可以访问路由参数"}},[t._v("#")]),t._v(" withRouter 当前组件内部可以访问路由参数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import { withRouter } from "react-router-dom";\nexport default App(withRouter)\n')])])]),n("h5",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),n("blockquote",[n("p",[t._v("使用BrowserRouter时，我们需要与后端配合，因为访问路由回想一个真实的url路径，会被后端解析为接口；")])]),t._v(" "),n("blockquote",[n("p",[t._v("http://localhost:8080/register/sunshine")])]),t._v(" "),n("blockquote",[n("p",[t._v("我们通过react路由配置出这样的一个动态路由时，后端会根据上面地址去找队友的接口荷叶面，没有找到时，会讲范湖一404的错误；")])]),t._v(" "),n("h5",{attrs:{id:"解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    使用 webpack-dev-server 来mock数据。我们需要开启 配置\n    module.exports = {\n        devServer:{\n            historyApiFallBack:true\n        }\n    }\n")])])]),n("blockquote",[n("p",[t._v("后端天记前段路由的过滤白名单")])]),t._v(" "),n("h5",{attrs:{id:"常用api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[t._v("#")]),t._v(" 常用api")]),t._v(" "),n("ul",[n("li",[t._v("Route")]),t._v(" "),n("li",[t._v("Switch")]),t._v(" "),n("li",[t._v("Link")]),t._v(" "),n("li",[t._v("NavLink")]),t._v(" "),n("li",[t._v("this.props.match")]),t._v(" "),n("li",[t._v("this.props.location")]),t._v(" "),n("li",[t._v("this.props.history")])]),t._v(" "),n("h3",{attrs:{id:"路由设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由设置"}},[t._v("#")]),t._v(" 路由设置")]),t._v(" "),n("h5",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("blockquote",[n("p",[t._v("router.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    \nimport List from 'components/list'\nimport Search from 'components/search'\n\nimport HotCom from 'components/list/subpage/hot'\nimport BrandCom from 'components/list/subpage/brand'\n\nexport default [\n    {\n        path: '/list',\n        component: List,\n        children: [\n            {\n                path: '/list/hot',\n                component: HotCom\n            },\n            {\n                path: '/list/brand',\n                component: BrandCom\n            },\n            {\n                path: '/list',\n                redirect: '/list/hot'\n            }\n        ]\n    },\n    {\n        path: '/search',\n        component: Search\n    },{\n        path: '/',\n        redirect: '/list'\n    }\n]\n")])])]),n("blockquote",[n("p",[t._v("routerView.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nclass RouterView extends React.Component {\n    render() {\n        let { router } = this.props,\n        isRedirect = router && router.length && router.filter(val => val.redirect),\n        RouteRedirect = isRedirect && isRedirect.length && isRedirect.map(val => <Redirect from = {val.path} key={val} to={val.redirect} />);\n        return (\n            <Switch>\n                {\n                    router && router.map((v, i) => {\n                        return v.component && <Route path={v.path} key={i} render = {(api) => {\n                            return <v.component router = { v.children } { ...api }></v.component>\n                        }} />\n                    }).concat(RouteRedirect)\n                }\n            </Switch>\n        )\n    }\n}\n\nexport default RouterView;\n")])])]),n("blockquote",[n("p",[t._v("调用组件 一级")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import RouterView from 'router/routerView'\nimport routers from 'router/routers'\n\n<RouterView router = { routers } />\n")])])]),n("blockquote",[n("p",[t._v("调用组件 子级")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import RouterView from 'router/routerView'\n\n<RouterView router = { this.props.router }/>\n")])])]),n("h5",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('### index.js\n    \n    import Routers from \'./routers\';\n\n    import React from \'react\';\n    \n    import {BrowserRouter} from \'react-router-dom\';\n    \n    import Maps from \'./maps\';\n    \n    class RouteView extends React.Component {\n        render(){\n            const {router}= this.props;\n            return <BrowserRouter>\n                <Maps router={router?router:Routers}></Maps>\n            </BrowserRouter>\n        }\n    }\n    export default RouteView;\n    \n### maps.js\n    \n    import {Switch,Route} from \'react-router-dom\';\n\n    import React from \'react\';\n    \n    class Maps extends React.Component{\n        render(){\n            const {router} = this.props;\n            return <Switch>\n                {\n                    router.length && router.map(item=>{\n                        return<Route key={item.id} path={item.path} component={()=>{\n                            const Component = item.component;\n                            const Children = item.children === undefined ? [] : item.children; \n                            return <Component router={Children}></Component>\n                        }}></Route>\n                    })\n                }\n            </Switch>\n        }\n    }\n    \n    export default Maps;\n    \n### routers.js\n    \n    import HomePage from \'view/home\';\n\n    import Rank from \'view/rank\';\n    \n    import SubPage from \'view/home/subpage\'\n    \n    const Routers = [\n        {\n            "path":"/home",\n            "id":"001",\n            "component":HomePage,\n            "name":"home",\n            children:[\n                {\n                    "path":"/home/subpage",\n                    "id":"001001",\n                    "component":SubPage,\n                    "name":"SubPage"\n                }\n            ]\n        },\n        {\n            "path":"/rank",\n            "id":"002",\n            "component":Rank,\n            "name":"Rank"\n        }\n    ]\n    \n    export default Routers;\n    \n')])])]),n("hr"),t._v(" "),n("h5",{attrs:{id:"传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传参"}},[t._v("#")]),t._v(" 传参")]),t._v(" "),n("blockquote",[n("p",[t._v("props.params")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    //设置路由\n    const routers = [{\n        path:"/user",\n        component:User\n    },{\n        path:"/user/:id",\n        component:Detail\n    }]\n    \n    //跳转路由动态传值\n    this.props.history.push({\n        pathname:"/user/1995"\n    })\n    \n')])])]),n("blockquote",[n("p",[t._v("props.query")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    //设置路由 query\n    const routers = [{\n        path:"/user",\n        component:User\n    },{\n        path:"/user/detail",\n        component:Detail\n    }]\n    \n    //跳转路由一\n    this.props.history.push({\n        pathname:"/user/detail",\n        query:{\n            id:1995\n        }\n    })\n    \n    //跳转路由二\n    <Link to = {\n        {\n             pathname:"/user/detail",\n             query:{\n                 id:1995\n             }\n        } \n    }\n    \n    //接受参数 id\n    this.props.location.query.id\n    \n')])])]),n("blockquote",[n("p",[t._v("props.state")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    \n    //设置路由  state\n    const routers = [{\n        path:"/user",\n        component:User\n    },{\n        path:"/user/detail",\n        component:Detail\n    }]\n    \n    //跳转路由一 state\n    this.props.history.push({\n        pathname:"/user/detail",\n        state:{\n            id:1995\n        }\n    })\n    \n    //跳转路由二\n    <Link to = {\n        {\n             pathname:"/user/detail",\n             state:{\n                 id:1995\n             }\n        } \n    }\n    \n    //接受参数 id\n    this.props.location.state.id\n    \n')])])]),n("hr")])}),[],!1,null,null,null);e.default=r.exports}}]);